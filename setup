#!/bin/bash
#
# shellcheck disable=SC1090
# shellcheck disable=SC2154
#
# setup.sh - An installer for Mod Organizer 2, and other tools, on Steam for Linux.
#
# This script is run by the user, and is capable of bootstrapping and removing
#   modding instances for Bethesda games running under Steam Play on Linux.
#
# Copyright: (c) 2022, Ryan Algar (https://github.com/ralgar/proton-mo2-installer)
#
# GNU General Public License v3.0 (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)


_project_name="proton-mo2-installer"
_project_name_formal="Proton MO2 Installer"

MO2_VERSION="2.4.4"
LOOT_VERSION="0.18.2"
PROTON_SHUNT_VERSION="1.1.0"
CUSTOM_PROTON_VERSION="Proton-6.17-STL-1"

cache_dir="${XDG_CACHE_HOME:-$HOME/.cache}/$_project_name"
install_path="${XDG_DATA_HOME:-$HOME/.local/share}/$_project_name"
script_dir="$(realpath "$(dirname "${BASH_SOURCE[0]}")")"


# Make sure dependencies are installed
_check_dependencies() {

    local dependencies=( \
        "bsdtar" \
        "curl" \
        "protontricks" \
        "protontricks-launch" \
        "xdg-mime" \
        "zenity" \
    )
    local missing_dependencies=()

    # Loop through the dependencies, making sure they're available
    for dependency in "${dependencies[@]}" ; do
        if ! which "$dependency" &> /dev/null ; then
            printf "\nERROR: Missing dependency: %s\n\n" "$dependency"
            missing_dependencies+=( "$dependency" )
        fi
    done

    # If any dependencies are missing, return failure
    if [[ -n ${missing_dependencies[*]} ]] ; then
        _dialog error missing_dependencies
        return 1
    fi
}


# Triggered on script exit
_cleanup() {

    # Remove temp tracking file
    if [[ -n "$tracked_temp" && -f "$tracked_temp" ]] ; then
        rm -f "$tracked_temp"
    fi
}
trap _cleanup EXIT 1 2 3 SIGTRAP 6 14 15


# Downloads a file from the specified URL
# USAGE: download_tool {URL}
_download_file() {

    local url="$1"

    if [[ ! -d "$cache_dir" ]] ; then
        mkdir -p "$cache_dir" || return 1
    fi

    if [[ ! -f "$cache_dir/${url##*/}" ]] ; then
        curl -Lo "$cache_dir/${url##*/}" "$url" || return 1
    fi
}


# Displays dialog boxes
_dialog() {

    local width=360
    local height=180

    case $1 in
        error)
            case $2 in
                installation_failed)
                    zenity \
                        --title="$_project_name_formal" \
                        --width "$width" --height "$height" \
                        --error --icon-name "dialog-error" \
                        --no-wrap --ellipsize \
                        --text '\nInstallation failed!'
                    ;;
                missing_dependencies)
                    zenity \
                        --title="$_project_name_formal" \
                        --width "$width" --height "$height" \
                        --error --icon-name "dialog-error" \
                        --no-wrap --ellipsize \
                        --text '\nMissing dependencies!'
                    ;;
                no_game_data)
                    zenity \
                        --title="$_project_name_formal" \
                        --width "$width" --height "$height" \
                        --error --icon-name "dialog-error" \
                        --no-wrap --ellipsize \
                        --text '\nCould not locate the chosen game!'
                    ;;
                no_steam)
                    zenity \
                        --title="$_project_name_formal" \
                        --width "$width" --height "$height" \
                        --error --icon-name "dialog-error" \
                        --no-wrap --ellipsize \
                        --text '\nCould not locate Steam data!'
                    ;;
                no_steam_config)
                    zenity \
                        --title="$_project_name_formal" \
                        --width "$width" --height "$height" \
                        --error --icon-name "dialog-error" \
                        --no-wrap --ellipsize \
                        --text '\nCould not locate Steam config file!'
                    ;;
                update_failed)
                    zenity \
                        --title="$_project_name_formal" \
                        --width "$width" --height "$height" \
                        --error --icon-name "dialog-error" \
                        --no-wrap --ellipsize \
                        --text '\nUpdate failed!'
                    ;;
            esac
            ;;

        info)
            case $2 in
                installation_success)
                    zenity \
                        --title="$_project_name_formal" \
                        --width "$width" --height "$height" \
                        --info --icon-name "dialog-info" \
                        --no-wrap --ellipsize \
                        --text '\nInstallation completed successfully!'
                    ;;
                uninstallation_complete)
                    zenity \
                        --title="$_project_name_formal" \
                        --width "$width" --height "$height" \
                        --info --icon-name "dialog-info" \
                        --no-wrap --ellipsize \
                        --text '\nUninstallation complete!'
                    ;;
                update_success)
                    zenity \
                        --title="$_project_name_formal" \
                        --width "$width" --height "$height" \
                        --info --icon-name "dialog-info" \
                        --no-wrap --ellipsize \
                        --text '\nUpdate completed successfully!'
                    ;;
            esac
            ;;
    esac
}


_find_steam_libraries() {

    # Find Steam root library VDF file
    # NOTE: `find` does not provide a useful return code, so
    #   we must use other logic to determine success
    vdf_file="$(find "$HOME" \
        ! -path '*/compatdata/*' \
        ! -path '*/config/*' \
        -name libraryfolders.vdf \
        -print -quit \
        2> /dev/null \
    )"

    # Ensure we found a VDF file
    if [[ ! -f "$vdf_file" ]] ; then
        printf "\nERROR: Unable to find a Steam installation for user.\n\n"
        _dialog error no_steam
        return 1
    fi

    # Read the VDF file
    steam_libraries=()
    while read -r line ; do
        if [[ $line =~ "path" ]] ; then
            printf "INFO: Found Steam library: %s\n" \
                "$(echo "$line" | awk '{ print $2 }' | sed s/\"//g)"
            steam_libraries+=( "$(echo "$line" | awk '{ print $2 }' | sed s/\"//g)" )
        fi
    done <"$vdf_file"

    # If we didn't find a library, return failure
    if [[ -z ${steam_libraries[*]} ]] ; then
        printf "\nERROR: Unable to find any Steam libraries in root VDF file.\n\n"
        _dialog error no_steam
        return 1
    fi
}


# Find Steam game by APPID
_find_game_data() {

    # Get a list of all Steam libraries `${steam_libraries[@]}`
    _find_steam_libraries || return 1

    # If the game manifest is found in a library, set $game_library
    # NOTE: `find` does not provide a useful return code, so
    #   we must use other logic to determine success
    for library in "${steam_libraries[@]}" ; do
        manifest="$(find "$library" -name "appmanifest_$game_appid.acf" 2> /dev/null)"
        if [[ -f $manifest ]] ; then
            game_library="$(dirname "$manifest")"
            break
        fi
    done

    # Return failure if the game cannot be found in a library
    if [[ ! -d $game_library ]] ; then
        printf "\nERROR: Game is not installed.\n\n"
        _dialog error no_game_data
        return 1
    fi

    # Return success if game data is found in library
    if [[ -d "$game_library/common/$game_steam_subdirectory" ]] ; then
        printf "INFO: Found game in library: %s\n" "$library"
        game_data="$game_library/common/$game_steam_subdirectory"
        return 0
    fi

    # Handle missing game data, or other unknown failure.
    printf "\nERROR: Game is installed, but the data directory is missing.\n\n"
    _dialog error no_game_data
    return 1
}


_install_custom_proton() {

    local base_url="https://github.com/ralgar/proton-builds/releases/download"
    local archive="${url##*/}"
    local steam_root
    local compat_tools
    local current_tool
    local game_prefix="$game_library/compatdata/$game_appid"

    _download_file "${base_url}/$CUSTOM_PROTON_VERSION/$CUSTOM_PROTON_VERSION.tar.gz"

    # Find the Steam global config and root directory
    # NOTE: `find` does not provide a useful return code, so
    #   we must use other logic to determine success
    steam_conf="$(\
        find "$HOME" \
        -name config.vdf \
        -print -quit \
        2> /dev/null \
    )"
    if [[ ! -f $steam_conf ]] ; then
        _dialog error no_steam_config
        return 1
    fi

    # Try to determine the Steam root directory
    steam_root="$(dirname "$steam_conf")"
    steam_root="${steam_root%/*}"
    if [[ ! -d $steam_root || ${steam_root##*/} != "Steam" ]] ; then
        return 1
    fi

    # Create compatibilitytools.d if it doesn't exists
    compat_tools="$steam_root/compatibilitytools.d"
    if [[ ! -d $compat_tools ]] ; then
        mkdir "$compat_tools"
    fi

    # Extract the custom Proton
    if [[ ! -d $compat_tools/$CUSTOM_PROTON_VERSION ]] ; then
        if bsdtar -C "$compat_tools" -xf "$cache_dir/$CUSTOM_PROTON_VERSION.tar.gz" ; then
            _track_file "$compat_tools/$CUSTOM_PROTON_VERSION"
        else
            return 1
        fi
    fi

    # Remap the game's compatibility tool
    current_tool="$("$script_dir/utils/compat-tool-remap.py" \
        -a "$game_appid" -c "$steam_conf" -l current)"
    if [[ $current_tool != "$CUSTOM_PROTON_VERSION" ]] ; then
        # Backup and remove the original game prefix if present
        # Return failure if no prefix is found
        if [[ -d $game_prefix ]] ; then
            mv "$game_prefix" "$game_prefix.bak.$(date +%s)" || return 1
        fi

        # Remap the compat tool
        if ! "$script_dir/utils/compat-tool-remap.py" \
            -a "$game_appid" -c "$steam_conf" -t "$CUSTOM_PROTON_VERSION"
        then
            return 1
        fi
    else
        echo "skipping compat remap"
    fi

    # Initialize a new game prefix with custom Proton
    if [[ ! -d $game_prefix ]] ; then
        touch "$game_data/proton-shunt.lock" || return 1
        steam -silent -applaunch "$game_appid" --init-prefix &>/dev/null &
        while [[ -f $game_data/proton-shunt.lock ]] ; do
            sleep 1
        done
    fi
}

#_install_enb() {
#
#    _download_file "$game_enb_url"
#
#    if bsdtar -C "$game_data" --strip-components 1 --exclude WrapperVersion/d3d11.dll -xvf "$cache_dir/${game_enb_url##*/}" 2> "$tracked_temp" ; then
#        sed -i "/^x /!d" "$tracked_temp" || return 1
#        sed -i "s|^x |$game_data/|" "$tracked_temp" || return 1
#        _track_file "$(tac "$tracked_temp")" || return 1
#    else
#        return 1
#    fi
#}


#_install_engine_fixes() {
#
#    # Part 1
#    local engine_fixes_part1_url="https://github.com/aers/EngineFixesSkyrim64/releases/download/6.0.2/Part.1.SSE.Engine.Fixes.for.1.5.39-1.5.97.7z"
#    _download_file "$engine_fixes_part1_url"
#
#    # Part 2
#    local engine_fixes_part2_url="https://github.com/aers/EngineFixesSkyrim64/releases/download/6.0.2/Part.2.skse64.Preloader.TBB.Lib.7z"
#    _download_file "$engine_fixes_part2_url"
#    if ! bsdtar -C "$game_data" -xvf "$cache_dir/${engine_fixes_part2_url##*/}" 2> "$tracked_temp" ; then
#        return 1
#    fi
#}


# Install LOOT globally, while checking for existing installation
_install_loot() {

    local url="https://github.com/loot/loot/releases/download/$LOOT_VERSION/loot_$LOOT_VERSION-win64.7z"
    local archive="${url##*/}"

    _download_file "$url" || return 1

    if [[ ! -d "$install_path/tools/loot" ]] ; then
        mkdir -p "$install_path/tools/loot" || return 1
    fi

    bsdtar -C "$install_path/tools/loot" --strip-components 1 -xf "$cache_dir/$archive" || return 1
}


_install_main() {

    if [[ $update ]] ; then
        local action="Updating"
    else
        local action="Installing"
    fi

    echo "# $action Mod Organizer 2..." ; sleep 1
    _install_mo2 || return 1

    echo "# $action LOOT..." ; sleep 1
    _install_loot || return 1

    echo "# $action Proton Shunt..." ; sleep 1
    _install_proton_shunt || return 1

    echo "# $action script extender..." ; sleep 1
    _install_script_extender || return 1

    #if [[ -n "$game_enb_url" ]] ; then
    #    desc="Install ENB"
    #    run _install_enb
    #fi

    echo "# Installing custom Proton..." ; sleep 1
    _install_custom_proton || return 1

    echo "# Configuring the game's prefix..." ; sleep 1
    _install_verbs || return 1

    echo "# Finished!" ; sleep 1
}


# Install an MO2 instance for the chosen game
_install_mo2() {

    local url="https://github.com/ModOrganizer2/modorganizer/releases/download/v$MO2_VERSION/Mod.Organizer-$MO2_VERSION.7z"

    _download_file "$url" || return 1

    mkdir -p "$instance_path" || return 1
    _track_file "$instance_path" || return 1

    bsdtar -C "$instance_path" -xf "$cache_dir/${url##*/}" || return 1

    # Create APPID file for nxm-broker
    echo "$game_appid" > "$instance_path/appid.txt" || return 1

    # Install NXM handlers
    local share="${XDG_DATA_HOME:-$HOME/.local/share}"

    if [[ ! -d "$share/applications" ]] ; then
        mkdir -p "$share/applications" || return 1
    fi

    cp "$script_dir/handlers/nxm-handler.desktop" "$share/applications" || return 1
    _track_file "$share/applications/nxm-handler.desktop" || return 1
    xdg-mime default nxm-handler.desktop x-scheme-handler/nxm || return 1

    if [[ $PATH =~ $HOME/.local/bin ]] ; then
        if [[ ! -d "$HOME/.local/bin" ]] ; then
            mkdir -p "$HOME/.local/bin" || return 1
        fi
        cp "$script_dir/handlers/nxm-broker.sh" "$HOME/.local/bin" || return 1
        chmod u+x "$HOME/.local/bin/nxm-broker.sh" || return 1
    else
        cp "$script_dir/handlers/nxm-broker.sh" "$install_path" || return 1
        chmod u+x "$install_path/nxm-broker.sh" || return 1
        sed -i "s|nxm-broker.sh|$install_path/nxm-broker.sh|" \
            "$share/applications/nxm-handler.desktop" || return 1
    fi

    # FNIS and Nemesis workarounds
    for dir in GenerateFNIS_for_{Modders,Users} ; do
        if [[ ! -d $dir ]] ; then
            mkdir -p "$game_data/Data/tools/$dir" || return 1
            _track_file "$game_data/Data/tools" || return 1
        fi
    done

    if [[ ! -d "$game_data/Data/Nemesis_Engine" ]] ; then
        mkdir -p "$game_data/Data/Nemesis_Engine" || return 1
        _track_file "$game_data/Data/Nemesis_Engine" || return 1
    fi
}


_install_proton_shunt() {

    local baseurl="https://github.com/ralgar/proton-shunt/releases/download"
    local version="$PROTON_SHUNT_VERSION"

    # Replace the main game executable with Proton Shunt
    if [[ ! $update ]] ; then
        mv "${game_data:?}/$game_executable" \
            "${game_data:?}/$game_executable.bak" || return 1
    fi
    if [[ -f $script_dir/proton-shunt/proton-shunt-v$version.exe ]] ; then
        cp "$script_dir/proton-shunt/proton-shunt-v$version.exe" \
            "${game_data:?}/$game_executable" || return 1
    else
        _download_file "$baseurl/v$version/proton-shunt-v$version.exe" || return 1
        cp "$cache_dir/proton-shunt-v$version.exe" \
            "${game_data:?}/$game_executable" || return 1
    fi

    # Configure path to the Mod Organizer 2 executable
    echo "Z:$(sed 's/\//\\\\/g' <<< "$instance_path")\\ModOrganizer.exe" \
        > "${game_data:?}/proton-shunt.cfg" || return 1
    _track_file "${game_data:?}/proton-shunt.cfg" || return 1
}


# Install the game's script extender
_install_script_extender() {

    _download_file "$game_scriptextender_url" || return 1

    if [[ $game_scriptextender_strip_dirs -eq 0 ]] ; then
        if bsdtar -C "$game_data" -xvf "$cache_dir/${game_scriptextender_url##*/}" 2> "$tracked_temp" ; then
            sed -i "/^x /!d" "$tracked_temp" || return 1
            sed -i "/^x [dD]ata\/$/d" "$tracked_temp" || return 1
            sed -i "s|^x |$game_data/|" "$tracked_temp" || return 1
            _track_file "$(tac "$tracked_temp")" || return 1
        else
            return 1
        fi
    else
        if bsdtar -C "$game_data" --strip-components "$game_scriptextender_strip_dirs" \
            -xvf "$cache_dir/${game_scriptextender_url##*/}" 2> "$tracked_temp"
        then
            sed -i "/^x /!d" "$tracked_temp" || return 1
            sed -i "/^x [dD]ata\/$/d" "$tracked_temp" || return 1
            sed -i "s|^x |$game_data/|" "$tracked_temp" || return 1
            _track_file "$(tac "$tracked_temp")" || return 1
        else
            return 1
        fi
    fi

}


# Install verbs with protontricks
_install_verbs() {

    if which protontricks &> /dev/null ; then
        if [[ -n "$game_protontricks" ]] ; then
            for verb in "${game_protontricks[@]}" ; do
                if ! PROTON_VERSION="$CUSTOM_PROTON_VERSION" \
                    protontricks "$game_appid" -q "$verb"
                then
                    return 1
                fi
            done
        fi
    else
        return 1
    fi
}


_main() {

    _check_dependencies || return 1

    if ! zenity \
        --title="$_project_name_formal" \
        --window-icon="info" \
        --width 720 --height 540 \
        --text-info \
        --filename "$script_dir/dialog.txt" \
        --checkbox "I'm ready to continue"
    then
        return 1
    fi

    # Run the Select Game menu
    _select_game || return 1
    source "$script_dir/gamesinfo/$chosen_game.sh" || return 1
    instance_path="$install_path/modorganizer2/$game_nexusid"
    _find_game_data || return 1

    # Run the Installation / Update / Uninstallation
    _select_task || return 1
    case $chosen_task in
        "Install")
            _install_main | zenity \
                --title="$_project_name_formal" \
                --progress \
                --pulsate \
                --auto-close \
                --no-cancel \
                --width 360 --height 180
            if [[ ${PIPESTATUS[0]} -eq 0 && ${PIPESTATUS[1]} -eq 0 ]] ; then
                _dialog info installation_success
            else
                _uninstall
                _dialog error installation_failed
                return 1
            fi ;;
        "Update")
            update=1
            _install_main | zenity \
                --title="$_project_name_formal" \
                --progress \
                --pulsate \
                --auto-close \
                --no-cancel \
                --width 360 --height 180
            if [[ ${PIPESTATUS[0]} -eq 0 && ${PIPESTATUS[1]} -eq 0 ]] ; then
                _dialog info update_success
            else
                _dialog error update_failed
                return 1
            fi ;;
        "Uninstall")
            _uninstall || return 1
            _dialog info uninstallation_complete
            ;;
        *)
            return 1 ;;
    esac

    #_select_tools || return 1
}


_select_game() {

    if ! chosen_game="$(zenity \
        --title="$_project_name_formal" \
        --width 640 --height 480 \
        --list \
        --radiolist \
        --text "Choose a game:" \
        --column "Radio Button" \
        --column "Game List" \
        --hide-header \
        --width "480" \
        --height "360" \
        FALSE "Enderal" \
        FALSE "Enderal Special Edition" \
        FALSE "Fallout 3" \
        FALSE "Fallout 3 GOTY" \
        FALSE "Fallout 4" \
        FALSE "Fallout New Vegas" \
        FALSE "Fallout New Vegas Russian" \
        FALSE "Morrowind" \
        FALSE "Oblivion" \
        FALSE "Skyrim" \
        FALSE "Skyrim Special Edition" \
    )" ; then
        return 1
    fi

    chosen_game="${chosen_game// /}"
    chosen_game="${chosen_game,,}"
}


# Select the task to perform on chosen game
_select_task() {
    if [[ ! -d $instance_path ]] ; then
        if ! chosen_task="$(zenity \
            --title="$_project_name_formal" \
            --width 640 --height 480 \
            --list \
            --radiolist \
            --text "Choose a task:" \
            --column "Radio Button" \
            --column "Task List" \
            --hide-header \
            --width "480" \
            --height "360" \
            FALSE "Install" \
        )" ; then
            return 1
        fi
    else
        if ! chosen_task="$(zenity \
            --title="$_project_name_formal" \
            --width 640 --height 480 \
            --list \
            --radiolist \
            --text "Choose a task:" \
            --column "Radio Button" \
            --column "Task List" \
            --hide-header \
            --width "480" \
            --height "360" \
            FALSE "Update" \
            FALSE "Uninstall" \
        )" ; then
            return 1
        fi
    fi
}


#_select_tools() {
#
#    chosen_tools="$(zenity \
#        --title="$_project_name_formal" \
#        --list --checklist --multiple \
#        --column "Checklist" --column "Tools" \
#        --hide-header \
#        FALSE "ENB" \
#        FALSE "LOOT" \
#    )"
#
#    IFS='|' read -ra tools_array <<< "$chosen_tools"
#
#    for tool in "${tools_array[@]}" ; do
#        printf "%s\n" "$tool"
#    done
#}


_track_file() {

    local file="$1"

    if [[ -z $tracked_temp ]] ; then
        tracked_temp="$(mktemp)" || return 1
    fi

    if ! grep "$file" "$instance_path/tracked_files.txt" &> /dev/null ; then
        echo "$file" >> "$instance_path/tracked_files.txt" || return 1
    fi
}


_uninstall() {

    local file
    local remaining_instances
    local remove

    # Load tracked files for the game instance
    if [[ -f "$instance_path/tracked_files.txt" ]] ; then
        readarray -t remove < "$instance_path/tracked_files.txt"
        remove+=( "$install_path" )
    else
        printf "\nNothing to uninstall...\n"
        return 1
    fi

    # Check for any other game instances before removing everything
    if [[ $(find "$install_path/modorganizer2" -mindepth 1 -maxdepth 1 -type d | wc -l) -gt 1 ]] ; then
        remaining_instances=true
    fi

    # Remove the tracked files
    for file in "${remove[@]}" ; do
        if [[ "$file" =~ ${_project_name}$|nxm-handler ]] ; then
            if [[ ( -e "$file" || -L "$file" ) && "$remaining_instances" != true ]] ; then
                rm -rf "$file" || return 1
                printf "Removed:  %s\n" "$file"
            else
                printf "Skipped:  %s\n" "$file"
            fi
        else
            if [[ -e "$file" || -L "$file" ]] ; then
                rm -rf "$file" || return 1
                printf "Removed:  %s\n" "$file"
            fi
        fi
    done

    # Restore any .bak files in the game dir
    for file in "${game_data:?}"/*.bak ; do
        rm -rf "${file%.bak}"
        mv "$file" "${file%.bak}"
        printf "Restored: %s\n" "${file%.bak}"
    done

    if [[ "$remaining_instances" = true ]] ; then
        printf "\nInstances were detected for other games, some files were not removed.\n"
    fi
    printf "\nUninstall completed!\n"
}


if _main ; then
    exit 0
else
    exit 1
fi
